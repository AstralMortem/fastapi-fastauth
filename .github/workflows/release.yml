name: Build and Publish to PyPI

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'
  release:
    types: [published]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

#    - name: Load cached venv
#      id: cached-poetry-dependencies
#      uses: actions/cache@v3
#      with:
#        path: .venv
#        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install project
      run: poetry install --no-interaction

    - name: Run tests
      run: |
        poetry run pytest --cov --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{secrets.CODECOV_TOKEN}}
        file: ./coverage.xml
        fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Build package
      run: poetry build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
#
#  publish-testpypi:
#    runs-on: ubuntu-latest
#    needs: build
#    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && contains(github.ref, '-'))
#    environment:
#      name: testpypi
#      url: https://test.pypi.org/p/${{ github.event.repository.name }}
#
#    steps:
#    - uses: actions/checkout@v4
#
#    - name: Set up Python
#      uses: actions/setup-python@v4
#      with:
#        python-version: "3.12"
#
#    - name: Install Poetry
#      uses: snok/install-poetry@v1
#      with:
#        version: latest
#
#    - name: Download build artifacts
#      uses: actions/download-artifact@v3
#      with:
#        name: dist
#        path: dist/
#
#    - name: Configure Poetry for TestPyPI
#      run: |
#        poetry config repositories.testpypi https://test.pypi.org/legacy/
#        poetry config pypi-token.testpypi ${{ secrets.TEST_PYPI_API_TOKEN }}
#
#    - name: Publish to TestPyPI
#      run: poetry publish --repository testpypi

  publish-pypi:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-'))
    environment:
      name: pypi
      url: https://pypi.org/p/${{ github.event.repository.name }}

    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI (Trusted Publishing)
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: dist/